require "sinatra"
require "zip"
require "json"

# CONFIGURABLE  STUFF ==========================================================

MANIFEST_FILE = "manifest.json"
CMD           = "main.py"
ZIP_FILE      = "farmware.zip"
PORT          = ENV["SERVER_PORT"] || 4567
BASE_URL      = "http://localhost:#{PORT}"
DEFAULTS      = {
  args: [ CMD ],
  author: "Rick Carlino",
  description: "autogenerated by HostFarmwareTools",
  executable: "python2",
  language: "Custom",
  min_os_version_major: 3,
  package: "test_farmware",
  url: "#{BASE_URL}/#{MANIFEST_FILE}",
  zip: "#{BASE_URL}/#{ZIP_FILE}"
}

# CONSTANTS ====================================================================

BAD_MANIFEST  = "Error parsing MANIFEST_FILE- Is it _valid_ JSON?"
ZIP_TYPE      = "application/octet-stream"
ZIP_PATH      = "/#{ZIP_FILE}"
MANIFEST_PATH = "/#{MANIFEST_FILE}"
LANDING_PAGE  = """
<ul>
  <li>
    <a href=\"#{MANIFEST_PATH}\">#{MANIFEST_FILE}</a>
  </li>
  <li>
    <a href=\"#{ZIP_PATH}\">#{ZIP_FILE}</a>
  </li>
</ul>
"""

# HELPERS ======================================================================

def delete_zip
  File.delete(ZIP_FILE) if File.exist?(ZIP_FILE)
end

def make_zip
  Zip::File
    .open(ZIP_FILE, Zip::File::CREATE) { |z| z.add(CMD, File.expand_path(CMD)) }
end

def generate_farmware
  delete_zip
  make_zip
end

def send_zip
  send_file(ZIP_FILE, filename: ZIP_FILE, type: ZIP_TYPE)
end

def custom_overrides
  File.file?(MANIFEST_FILE) ? JSON.parse(File.read(MANIFEST_FILE)) : {}
end

def manifest_json
  DEFAULTS
    .merge(version: "0.0.1-#{Digest::SHA256.file(ZIP_FILE).to_s[0..8]}")
    .merge(custom_overrides)
    .transform_keys(&:to_sym)
    .to_json
rescue JSON::ParserError
  {error: BAD_MANIFEST}.to_json
end

# HTTP ENDPOINTS ===============================================================
get "/" do
  LANDING_PAGE
end

get MANIFEST_PATH do
  generate_farmware
  manifest_json
end

get ZIP_PATH do
  generate_farmware
  send_zip
end
